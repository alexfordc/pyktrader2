# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyktlib', [dirname(__file__)])
        except ImportError:
            import _pyktlib
            return _pyktlib
        if fp is not None:
            try:
                _mod = imp.load_module('_pyktlib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyktlib = swig_import_helper()
    del swig_import_helper
else:
    import _pyktlib
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyktlib.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pyktlib.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pyktlib.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pyktlib.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pyktlib.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pyktlib.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pyktlib.SwigPyIterator_copy(self)

    def next(self):
        return _pyktlib.SwigPyIterator_next(self)

    def __next__(self):
        return _pyktlib.SwigPyIterator___next__(self)

    def previous(self):
        return _pyktlib.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pyktlib.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pyktlib.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pyktlib.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pyktlib.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pyktlib.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pyktlib.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pyktlib.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pyktlib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def BlackPrice(F, K, vol, t_exp, df, PutCall):
    return _pyktlib.BlackPrice(F, K, vol, t_exp, df, PutCall)
BlackPrice = _pyktlib.BlackPrice

def BlackScholesPrice(S, K, vol, t_exp, rf, rd, PutCall):
    return _pyktlib.BlackScholesPrice(S, K, vol, t_exp, rf, rd, PutCall)
BlackScholesPrice = _pyktlib.BlackScholesPrice

def BlackDelta(F, K, vol, t_exp, df, PutCall):
    return _pyktlib.BlackDelta(F, K, vol, t_exp, df, PutCall)
BlackDelta = _pyktlib.BlackDelta

def BSDigitalPrice(F, K, vol, t_exp, df, PutCall):
    return _pyktlib.BSDigitalPrice(F, K, vol, t_exp, df, PutCall)
BSDigitalPrice = _pyktlib.BSDigitalPrice

def BachelierPrice(F, K, vol, t_exp, df, PutCall):
    return _pyktlib.BachelierPrice(F, K, vol, t_exp, df, PutCall)
BachelierPrice = _pyktlib.BachelierPrice

def BlackImpliedVol(MktPrice, F, K, r, T, PutCall, tol=1e-5):
    return _pyktlib.BlackImpliedVol(MktPrice, F, K, r, T, PutCall, tol)
BlackImpliedVol = _pyktlib.BlackImpliedVol

def BSImpliedVol(MktPrice, S, K, r, T, PutCall, tol=1e-5):
    return _pyktlib.BSImpliedVol(MktPrice, S, K, r, T, PutCall, tol)
BSImpliedVol = _pyktlib.BSImpliedVol

def BachelierImpliedVol(MktPrice, F, K, r, T, PutCall, tol=1e-5):
    return _pyktlib.BachelierImpliedVol(MktPrice, F, K, r, T, PutCall, tol)
BachelierImpliedVol = _pyktlib.BachelierImpliedVol

def american_prem_fut_btree(F, K, vol, t_exp, df, PutCall, bin_tree_nstep=128):
    return _pyktlib.american_prem_fut_btree(F, K, vol, t_exp, df, PutCall, bin_tree_nstep)
american_prem_fut_btree = _pyktlib.american_prem_fut_btree

def AmericanOptFutPrice(F, K, vol, t_exp, df, PutCall, bin_tree_nstep=128):
    return _pyktlib.AmericanOptFutPrice(F, K, vol, t_exp, df, PutCall, bin_tree_nstep)
AmericanOptFutPrice = _pyktlib.AmericanOptFutPrice

def AmericanImpliedVol(MktPrice, F, K, r, T, PutCall, tol=1e-5, bin_tree_nstep=128):
    return _pyktlib.AmericanImpliedVol(MktPrice, F, K, r, T, PutCall, tol, bin_tree_nstep)
AmericanImpliedVol = _pyktlib.AmericanImpliedVol

def SamuelsonFactor(a, b, t, T, mat):
    return _pyktlib.SamuelsonFactor(a, b, t, T, mat)
SamuelsonFactor = _pyktlib.SamuelsonFactor
class VolNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VolNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VolNode, name)
    __repr__ = _swig_repr

    def GetVolByStrike(self, strike, dmat=0):
        return _pyktlib.VolNode_GetVolByStrike(self, strike, dmat)

    def GetVolByDelta(self, delta, dmat=0):
        return _pyktlib.VolNode_GetVolByDelta(self, delta, dmat)

    def GetVolByMoneyness(self, ratio, dmat=0):
        return _pyktlib.VolNode_GetVolByMoneyness(self, ratio, dmat)

    def GetInstVol(self, d=0):
        return _pyktlib.VolNode_GetInstVol(self, d)

    def setAtm(self, atm):
        return _pyktlib.VolNode_setAtm(self, atm)

    def setToday(self, dtoday):
        return _pyktlib.VolNode_setToday(self, dtoday)

    def setExp(self, dexp):
        return _pyktlib.VolNode_setExp(self, dexp)

    def setTime2Exp(self, expiryTimes):
        return _pyktlib.VolNode_setTime2Exp(self, expiryTimes)

    def setAccrual(self, accrual):
        return _pyktlib.VolNode_setAccrual(self, accrual)

    def atmVol_(self):
        return _pyktlib.VolNode_atmVol_(self)

    def dtoday_(self):
        return _pyktlib.VolNode_dtoday_(self)

    def dexp_(self):
        return _pyktlib.VolNode_dexp_(self)

    def accrual_(self):
        return _pyktlib.VolNode_accrual_(self)

    def expiry_(self):
        return _pyktlib.VolNode_expiry_(self)

    def time2expiry_(self, dtoday, dexp):
        return _pyktlib.VolNode_time2expiry_(self, dtoday, dexp)

    def nextwkday_(self, dtoday):
        return _pyktlib.VolNode_nextwkday_(self, dtoday)

    def numBusDays_(self, dtoday, dexp):
        return _pyktlib.VolNode_numBusDays_(self, dtoday, dexp)

    def getDayFraction_(self, dd):
        return _pyktlib.VolNode_getDayFraction_(self, dd)

    def __init__(self, *args):
        this = _pyktlib.new_VolNode(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyktlib.delete_VolNode
    __del__ = lambda self: None
VolNode_swigregister = _pyktlib.VolNode_swigregister
VolNode_swigregister(VolNode)

class SamuelVolNode(VolNode):
    __swig_setmethods__ = {}
    for _s in [VolNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SamuelVolNode, name, value)
    __swig_getmethods__ = {}
    for _s in [VolNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SamuelVolNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyktlib.new_SamuelVolNode(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def alpha_(self):
        return _pyktlib.SamuelVolNode_alpha_(self)

    def beta_(self):
        return _pyktlib.SamuelVolNode_beta_(self)

    def setAlpha(self, alpha):
        return _pyktlib.SamuelVolNode_setAlpha(self, alpha)

    def setBeta(self, beta):
        return _pyktlib.SamuelVolNode_setBeta(self, beta)

    def GetVolByMoneyness(self, ratio, dmat):
        return _pyktlib.SamuelVolNode_GetVolByMoneyness(self, ratio, dmat)

    def GetInstVol(self, d):
        return _pyktlib.SamuelVolNode_GetInstVol(self, d)
    __swig_destroy__ = _pyktlib.delete_SamuelVolNode
    __del__ = lambda self: None
SamuelVolNode_swigregister = _pyktlib.SamuelVolNode_swigregister
SamuelVolNode_swigregister(SamuelVolNode)

class Delta5VolNode(VolNode):
    __swig_setmethods__ = {}
    for _s in [VolNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Delta5VolNode, name, value)
    __swig_getmethods__ = {}
    for _s in [VolNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Delta5VolNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyktlib.new_Delta5VolNode(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyktlib.delete_Delta5VolNode
    __del__ = lambda self: None

    def initialize(self):
        return _pyktlib.Delta5VolNode_initialize(self)

    def setAtm(self, atm):
        return _pyktlib.Delta5VolNode_setAtm(self, atm)

    def setFwd(self, fwd):
        return _pyktlib.Delta5VolNode_setFwd(self, fwd)

    def setD10Vol(self, d10Vol):
        return _pyktlib.Delta5VolNode_setD10Vol(self, d10Vol)

    def setD25Vol(self, d25Vol):
        return _pyktlib.Delta5VolNode_setD25Vol(self, d25Vol)

    def setD75Vol(self, d75Vol):
        return _pyktlib.Delta5VolNode_setD75Vol(self, d75Vol)

    def setD90Vol(self, d90Vol):
        return _pyktlib.Delta5VolNode_setD90Vol(self, d90Vol)

    def d10Vol_(self):
        return _pyktlib.Delta5VolNode_d10Vol_(self)

    def d25Vol_(self):
        return _pyktlib.Delta5VolNode_d25Vol_(self)

    def d75Vol_(self):
        return _pyktlib.Delta5VolNode_d75Vol_(self)

    def d90Vol_(self):
        return _pyktlib.Delta5VolNode_d90Vol_(self)

    def fwd_(self):
        return _pyktlib.Delta5VolNode_fwd_(self)

    def omega_(self):
        return _pyktlib.Delta5VolNode_omega_(self)

    def GetVolByStrike(self, strike, t2mat=0):
        return _pyktlib.Delta5VolNode_GetVolByStrike(self, strike, t2mat)

    def GetVolByDelta(self, delta, t2mat=0):
        return _pyktlib.Delta5VolNode_GetVolByDelta(self, delta, t2mat)

    def GetVolByMoneyness(self, ratio, t2mat=0):
        return _pyktlib.Delta5VolNode_GetVolByMoneyness(self, ratio, t2mat)
Delta5VolNode_swigregister = _pyktlib.Delta5VolNode_swigregister
Delta5VolNode_swigregister(Delta5VolNode)

class SamuelDelta5VolNode(Delta5VolNode):
    __swig_setmethods__ = {}
    for _s in [Delta5VolNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SamuelDelta5VolNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Delta5VolNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SamuelDelta5VolNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyktlib.new_SamuelDelta5VolNode(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def alpha_(self):
        return _pyktlib.SamuelDelta5VolNode_alpha_(self)

    def beta_(self):
        return _pyktlib.SamuelDelta5VolNode_beta_(self)

    def setAlpha(self, alpha):
        return _pyktlib.SamuelDelta5VolNode_setAlpha(self, alpha)

    def setBeta(self, beta):
        return _pyktlib.SamuelDelta5VolNode_setBeta(self, beta)

    def GetVolByMoneyness(self, ratio, dmat):
        return _pyktlib.SamuelDelta5VolNode_GetVolByMoneyness(self, ratio, dmat)

    def GetInstVol(self, d):
        return _pyktlib.SamuelDelta5VolNode_GetInstVol(self, d)
    __swig_destroy__ = _pyktlib.delete_SamuelDelta5VolNode
    __del__ = lambda self: None
SamuelDelta5VolNode_swigregister = _pyktlib.SamuelDelta5VolNode_swigregister
SamuelDelta5VolNode_swigregister(SamuelDelta5VolNode)


def FitDelta5VolParams(t2exp, fwd, strikeList, volList):
    return _pyktlib.FitDelta5VolParams(t2exp, fwd, strikeList, volList)
FitDelta5VolParams = _pyktlib.FitDelta5VolParams
class Pricer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pricer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pricer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def price(self):
        return _pyktlib.Pricer_price(self)

    def delta(self):
        return _pyktlib.Pricer_delta(self)

    def gamma(self):
        return _pyktlib.Pricer_gamma(self)

    def vega(self):
        return _pyktlib.Pricer_vega(self)

    def theta(self):
        return _pyktlib.Pricer_theta(self)

    def setStrike(self, strike):
        return _pyktlib.Pricer_setStrike(self, strike)

    def setFwd(self, fwd):
        return _pyktlib.Pricer_setFwd(self, fwd)

    def setVol(self, vol):
        return _pyktlib.Pricer_setVol(self, vol)

    def setIR(self, ir):
        return _pyktlib.Pricer_setIR(self, ir)

    def setExpiry(self, dexp):
        return _pyktlib.Pricer_setExpiry(self, dexp)

    def setT2Exp(self, time2expiry):
        return _pyktlib.Pricer_setT2Exp(self, time2expiry)

    def setToday(self, dtoday):
        return _pyktlib.Pricer_setToday(self, dtoday)

    def setOtype(self, otype):
        return _pyktlib.Pricer_setOtype(self, otype)

    def strike_(self):
        return _pyktlib.Pricer_strike_(self)

    def fwd_(self):
        return _pyktlib.Pricer_fwd_(self)

    def vol_(self):
        return _pyktlib.Pricer_vol_(self)

    def dexp_(self):
        return _pyktlib.Pricer_dexp_(self)

    def dtoday_(self):
        return _pyktlib.Pricer_dtoday_(self)

    def time2expiry_(self):
        return _pyktlib.Pricer_time2expiry_(self)

    def irate_(self):
        return _pyktlib.Pricer_irate_(self)

    def otype_(self):
        return _pyktlib.Pricer_otype_(self)

    def priceTweak(self):
        return _pyktlib.Pricer_priceTweak(self)

    def volTweak(self):
        return _pyktlib.Pricer_volTweak(self)
    __swig_destroy__ = _pyktlib.delete_Pricer
    __del__ = lambda self: None
Pricer_swigregister = _pyktlib.Pricer_swigregister
Pricer_swigregister(Pricer)

class BlackPricer(Pricer):
    __swig_setmethods__ = {}
    for _s in [Pricer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackPricer, name, value)
    __swig_getmethods__ = {}
    for _s in [Pricer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackPricer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyktlib.new_BlackPricer(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def price(self):
        return _pyktlib.BlackPricer_price(self)
    __swig_destroy__ = _pyktlib.delete_BlackPricer
    __del__ = lambda self: None
BlackPricer_swigregister = _pyktlib.BlackPricer_swigregister
BlackPricer_swigregister(BlackPricer)

class AmericanFutPricer(Pricer):
    __swig_setmethods__ = {}
    for _s in [Pricer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AmericanFutPricer, name, value)
    __swig_getmethods__ = {}
    for _s in [Pricer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AmericanFutPricer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyktlib.new_AmericanFutPricer(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def price(self):
        return _pyktlib.AmericanFutPricer_price(self)
    __swig_destroy__ = _pyktlib.delete_AmericanFutPricer
    __del__ = lambda self: None
AmericanFutPricer_swigregister = _pyktlib.AmericanFutPricer_swigregister
AmericanFutPricer_swigregister(AmericanFutPricer)

class DigitalPricer(Pricer):
    __swig_setmethods__ = {}
    for _s in [Pricer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DigitalPricer, name, value)
    __swig_getmethods__ = {}
    for _s in [Pricer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DigitalPricer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyktlib.new_DigitalPricer(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def price(self):
        return _pyktlib.DigitalPricer_price(self)
    __swig_destroy__ = _pyktlib.delete_DigitalPricer
    __del__ = lambda self: None
DigitalPricer_swigregister = _pyktlib.DigitalPricer_swigregister
DigitalPricer_swigregister(DigitalPricer)

class BachelierPricer(Pricer):
    __swig_setmethods__ = {}
    for _s in [Pricer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BachelierPricer, name, value)
    __swig_getmethods__ = {}
    for _s in [Pricer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BachelierPricer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyktlib.new_BachelierPricer(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def price(self):
        return _pyktlib.BachelierPricer_price(self)
    __swig_destroy__ = _pyktlib.delete_BachelierPricer
    __del__ = lambda self: None
BachelierPricer_swigregister = _pyktlib.BachelierPricer_swigregister
BachelierPricer_swigregister(BachelierPricer)

class TimeSeries(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeSeries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeSeries, name)
    __repr__ = _swig_repr

    def date_(self):
        return _pyktlib.TimeSeries_date_(self)

    def data_(self):
        return _pyktlib.TimeSeries_data_(self)

    def __init__(self, *args):
        this = _pyktlib.new_TimeSeries(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def setDate(self, date):
        return _pyktlib.TimeSeries_setDate(self, date)

    def setData(self, data):
        return _pyktlib.TimeSeries_setData(self, data)

    def isValidated(self):
        return _pyktlib.TimeSeries_isValidated(self)
    __swig_destroy__ = _pyktlib.delete_TimeSeries
    __del__ = lambda self: None
TimeSeries_swigregister = _pyktlib.TimeSeries_swigregister
TimeSeries_swigregister(TimeSeries)


def GetTSWeightedSum(ts1, ts2, w1, w2):
    return _pyktlib.GetTSWeightedSum(ts1, ts2, w1, w2)
GetTSWeightedSum = _pyktlib.GetTSWeightedSum
class HistVolCalculator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistVolCalculator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HistVolCalculator, name)
    __repr__ = _swig_repr

    def __init__(self, ts, expiry, freq, btMonths):
        this = _pyktlib.new_HistVolCalculator(ts, expiry, freq, btMonths)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def pricer(self, fwd, strike, vol, currDate):
        return _pyktlib.HistVolCalculator_pricer(self, fwd, strike, vol, currDate)

    def delta(self, fwd, strike, vol, currDate):
        return _pyktlib.HistVolCalculator_delta(self, fwd, strike, vol, currDate)

    def deltaHedgePL(self, vol, start_idx, end_idx):
        return _pyktlib.HistVolCalculator_deltaHedgePL(self, vol, start_idx, end_idx)

    def BreakevenVols(self):
        return _pyktlib.HistVolCalculator_BreakevenVols(self)

    def ts_(self):
        return _pyktlib.HistVolCalculator_ts_(self)

    def freq_(self):
        return _pyktlib.HistVolCalculator_freq_(self)

    def expiry_(self):
        return _pyktlib.HistVolCalculator_expiry_(self)

    def setExpiry(self, expiry):
        return _pyktlib.HistVolCalculator_setExpiry(self, expiry)

    def setFreq(self, freq):
        return _pyktlib.HistVolCalculator_setFreq(self, freq)

    def setTS(self, ts):
        return _pyktlib.HistVolCalculator_setTS(self, ts)
    __swig_destroy__ = _pyktlib.delete_HistVolCalculator
    __del__ = lambda self: None
HistVolCalculator_swigregister = _pyktlib.HistVolCalculator_swigregister
HistVolCalculator_swigregister(HistVolCalculator)


def xl2weekday(xldate):
    return _pyktlib.xl2weekday(xldate)
xl2weekday = _pyktlib.xl2weekday

def isweekday(xldate):
    return _pyktlib.isweekday(xldate)
isweekday = _pyktlib.isweekday

def businessDays(startD, endD, hols):
    return _pyktlib.businessDays(startD, endD, hols)
businessDays = _pyktlib.businessDays

def NumBusDays(startD, endD, hols):
    return _pyktlib.NumBusDays(startD, endD, hols)
NumBusDays = _pyktlib.NumBusDays

def NextBusDay(startD, hols):
    return _pyktlib.NextBusDay(startD, hols)
NextBusDay = _pyktlib.NextBusDay

def GetDayFraction(dExp, accrual):
    return _pyktlib.GetDayFraction(dExp, accrual)
GetDayFraction = _pyktlib.GetDayFraction

def norm_rand():
    return _pyktlib.norm_rand()
norm_rand = _pyktlib.norm_rand

def ExcelSerialDateToDMY(nSerialDate, nDay, nMonth, nYear):
    return _pyktlib.ExcelSerialDateToDMY(nSerialDate, nDay, nMonth, nYear)
ExcelSerialDateToDMY = _pyktlib.ExcelSerialDateToDMY

def DMYToExcelSerialDate(nDay, nMonth, nYear):
    return _pyktlib.DMYToExcelSerialDate(nDay, nMonth, nYear)
DMYToExcelSerialDate = _pyktlib.DMYToExcelSerialDate

def resizeMatrix(*args):
    return _pyktlib.resizeMatrix(*args)
resizeMatrix = _pyktlib.resizeMatrix

def size1(*args):
    return _pyktlib.size1(*args)
size1 = _pyktlib.size1

def size2(*args):
    return _pyktlib.size2(*args)
size2 = _pyktlib.size2

def transpose(m):
    return _pyktlib.transpose(m)
transpose = _pyktlib.transpose

def range(*args):
    return _pyktlib.range(*args)
range = _pyktlib.range

def zeros(n):
    return _pyktlib.zeros(n)
zeros = _pyktlib.zeros

def ones(n):
    return _pyktlib.ones(n)
ones = _pyktlib.ones

def add(*args):
    return _pyktlib.add(*args)
add = _pyktlib.add

def subtract(*args):
    return _pyktlib.subtract(*args)
subtract = _pyktlib.subtract

def multItems(*args):
    return _pyktlib.multItems(*args)
multItems = _pyktlib.multItems

def matrixMult(result, m1, m2):
    return _pyktlib.matrixMult(result, m1, m2)
matrixMult = _pyktlib.matrixMult

def sum(m):
    return _pyktlib.sum(m)
sum = _pyktlib.sum

def divItems(*args):
    return _pyktlib.divItems(*args)
divItems = _pyktlib.divItems

def applyFun(*args):
    return _pyktlib.applyFun(*args)
applyFun = _pyktlib.applyFun

def matrixVectorMult(result, m, v):
    return _pyktlib.matrixVectorMult(result, m, v)
matrixVectorMult = _pyktlib.matrixVectorMult
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyktlib.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyktlib.IntVector___nonzero__(self)

    def __bool__(self):
        return _pyktlib.IntVector___bool__(self)

    def __len__(self):
        return _pyktlib.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _pyktlib.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyktlib.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyktlib.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyktlib.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyktlib.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyktlib.IntVector___setitem__(self, *args)

    def pop(self):
        return _pyktlib.IntVector_pop(self)

    def append(self, x):
        return _pyktlib.IntVector_append(self, x)

    def empty(self):
        return _pyktlib.IntVector_empty(self)

    def size(self):
        return _pyktlib.IntVector_size(self)

    def swap(self, v):
        return _pyktlib.IntVector_swap(self, v)

    def begin(self):
        return _pyktlib.IntVector_begin(self)

    def end(self):
        return _pyktlib.IntVector_end(self)

    def rbegin(self):
        return _pyktlib.IntVector_rbegin(self)

    def rend(self):
        return _pyktlib.IntVector_rend(self)

    def clear(self):
        return _pyktlib.IntVector_clear(self)

    def get_allocator(self):
        return _pyktlib.IntVector_get_allocator(self)

    def pop_back(self):
        return _pyktlib.IntVector_pop_back(self)

    def erase(self, *args):
        return _pyktlib.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyktlib.new_IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pyktlib.IntVector_push_back(self, x)

    def front(self):
        return _pyktlib.IntVector_front(self)

    def back(self):
        return _pyktlib.IntVector_back(self)

    def assign(self, n, x):
        return _pyktlib.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _pyktlib.IntVector_resize(self, *args)

    def insert(self, *args):
        return _pyktlib.IntVector_insert(self, *args)

    def reserve(self, n):
        return _pyktlib.IntVector_reserve(self, n)

    def capacity(self):
        return _pyktlib.IntVector_capacity(self)
    __swig_destroy__ = _pyktlib.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _pyktlib.IntVector_swigregister
IntVector_swigregister(IntVector)
cvar = _pyktlib.cvar
Yearly_Accrual_Days = cvar.Yearly_Accrual_Days
CHN_Holidays = cvar.CHN_Holidays

class DblVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DblVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DblVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyktlib.DblVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyktlib.DblVector___nonzero__(self)

    def __bool__(self):
        return _pyktlib.DblVector___bool__(self)

    def __len__(self):
        return _pyktlib.DblVector___len__(self)

    def __getslice__(self, i, j):
        return _pyktlib.DblVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyktlib.DblVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyktlib.DblVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyktlib.DblVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyktlib.DblVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyktlib.DblVector___setitem__(self, *args)

    def pop(self):
        return _pyktlib.DblVector_pop(self)

    def append(self, x):
        return _pyktlib.DblVector_append(self, x)

    def empty(self):
        return _pyktlib.DblVector_empty(self)

    def size(self):
        return _pyktlib.DblVector_size(self)

    def swap(self, v):
        return _pyktlib.DblVector_swap(self, v)

    def begin(self):
        return _pyktlib.DblVector_begin(self)

    def end(self):
        return _pyktlib.DblVector_end(self)

    def rbegin(self):
        return _pyktlib.DblVector_rbegin(self)

    def rend(self):
        return _pyktlib.DblVector_rend(self)

    def clear(self):
        return _pyktlib.DblVector_clear(self)

    def get_allocator(self):
        return _pyktlib.DblVector_get_allocator(self)

    def pop_back(self):
        return _pyktlib.DblVector_pop_back(self)

    def erase(self, *args):
        return _pyktlib.DblVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyktlib.new_DblVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pyktlib.DblVector_push_back(self, x)

    def front(self):
        return _pyktlib.DblVector_front(self)

    def back(self):
        return _pyktlib.DblVector_back(self)

    def assign(self, n, x):
        return _pyktlib.DblVector_assign(self, n, x)

    def resize(self, *args):
        return _pyktlib.DblVector_resize(self, *args)

    def insert(self, *args):
        return _pyktlib.DblVector_insert(self, *args)

    def reserve(self, n):
        return _pyktlib.DblVector_reserve(self, n)

    def capacity(self):
        return _pyktlib.DblVector_capacity(self)
    __swig_destroy__ = _pyktlib.delete_DblVector
    __del__ = lambda self: None
DblVector_swigregister = _pyktlib.DblVector_swigregister
DblVector_swigregister(DblVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyktlib.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyktlib.StringVector___nonzero__(self)

    def __bool__(self):
        return _pyktlib.StringVector___bool__(self)

    def __len__(self):
        return _pyktlib.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _pyktlib.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyktlib.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyktlib.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyktlib.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyktlib.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyktlib.StringVector___setitem__(self, *args)

    def pop(self):
        return _pyktlib.StringVector_pop(self)

    def append(self, x):
        return _pyktlib.StringVector_append(self, x)

    def empty(self):
        return _pyktlib.StringVector_empty(self)

    def size(self):
        return _pyktlib.StringVector_size(self)

    def swap(self, v):
        return _pyktlib.StringVector_swap(self, v)

    def begin(self):
        return _pyktlib.StringVector_begin(self)

    def end(self):
        return _pyktlib.StringVector_end(self)

    def rbegin(self):
        return _pyktlib.StringVector_rbegin(self)

    def rend(self):
        return _pyktlib.StringVector_rend(self)

    def clear(self):
        return _pyktlib.StringVector_clear(self)

    def get_allocator(self):
        return _pyktlib.StringVector_get_allocator(self)

    def pop_back(self):
        return _pyktlib.StringVector_pop_back(self)

    def erase(self, *args):
        return _pyktlib.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyktlib.new_StringVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pyktlib.StringVector_push_back(self, x)

    def front(self):
        return _pyktlib.StringVector_front(self)

    def back(self):
        return _pyktlib.StringVector_back(self)

    def assign(self, n, x):
        return _pyktlib.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _pyktlib.StringVector_resize(self, *args)

    def insert(self, *args):
        return _pyktlib.StringVector_insert(self, *args)

    def reserve(self, n):
        return _pyktlib.StringVector_reserve(self, n)

    def capacity(self):
        return _pyktlib.StringVector_capacity(self)
    __swig_destroy__ = _pyktlib.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _pyktlib.StringVector_swigregister
StringVector_swigregister(StringVector)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyktlib.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyktlib.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _pyktlib.ConstCharVector___bool__(self)

    def __len__(self):
        return _pyktlib.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _pyktlib.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyktlib.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyktlib.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyktlib.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyktlib.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyktlib.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _pyktlib.ConstCharVector_pop(self)

    def append(self, x):
        return _pyktlib.ConstCharVector_append(self, x)

    def empty(self):
        return _pyktlib.ConstCharVector_empty(self)

    def size(self):
        return _pyktlib.ConstCharVector_size(self)

    def swap(self, v):
        return _pyktlib.ConstCharVector_swap(self, v)

    def begin(self):
        return _pyktlib.ConstCharVector_begin(self)

    def end(self):
        return _pyktlib.ConstCharVector_end(self)

    def rbegin(self):
        return _pyktlib.ConstCharVector_rbegin(self)

    def rend(self):
        return _pyktlib.ConstCharVector_rend(self)

    def clear(self):
        return _pyktlib.ConstCharVector_clear(self)

    def get_allocator(self):
        return _pyktlib.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _pyktlib.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _pyktlib.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyktlib.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pyktlib.ConstCharVector_push_back(self, x)

    def front(self):
        return _pyktlib.ConstCharVector_front(self)

    def back(self):
        return _pyktlib.ConstCharVector_back(self)

    def assign(self, n, x):
        return _pyktlib.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _pyktlib.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _pyktlib.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _pyktlib.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _pyktlib.ConstCharVector_capacity(self)
    __swig_destroy__ = _pyktlib.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _pyktlib.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

# This file is compatible with both classic and new-style classes.


